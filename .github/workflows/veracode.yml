# This workflow uses actions that are not certified by GitHub.
# This workflow will initiate a Veracode Static Analysis Pipeline scan, return a results.json and convert to SARIF for upload as a code scanning alert
name: Veracode Static Analysis Pipeline Scan

on:
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
permissions:
  contents: read

jobs:
  # This workflow contains a job to build and submit pipeline scan, you will need to customize the build process accordingly and make sure the artifact you build is used as the file input to the pipeline scan file parameter
  build-and-pipeline-scan:
    # The type of runner that the job will run on
    #permissions:
     # contents: read # for actions/checkout to fetch code
      #security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
    - uses: actions/checkout@v2
      with:
        repository: ''
    
    - name: Build with Maven
      working-directory: ./app/
      run: mvn -B package --file pom.xml
    
    # Nabil - You can use this command to Zip a specific folder for scanning
    # run: zip -r veracode-scan-target.zip ./
    - uses: actions/upload-artifact@v1
      with:
        name: my-artifact
        path: app/target/verademo.war
    
    - name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@0.2.1
      with:
          appname: 'GitHub_cax'
          createprofile: true
          filepath: 'app/target/verademo.war'
          vid: '${{secrets.VERACODE_API_ID}}'
          vkey: '${{secrets.VERACODE_API_KEY}}'
#          createsandbox: 'true'
#          sandboxname: 'SANDBOXNAME'
#          scantimeout: 0
#          exclude: '*.js'
#          include: '*.war'
#          criticality: 'VeryHigh'
  
    # download the Veracode Static Analysis Pipeline scan jar
    - run: curl --silent --show-error --fail -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    - run: unzip -o pipeline-scan-LATEST.zip

    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - run: java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file app/target/verademo.war
      continue-on-error: true
    - uses: actions/upload-artifact@v1
      with:
        name: ScanResults
        path: results.json
    - name: Convert pipeline scan output to SARIF format
      id: convert
      uses: veracode/veracode-pipeline-scan-results-to-sarif@master
      with:
        source-base-path-1: "^com/veracode:app/src/main/java/com/veracode"
        source-base-path-2: "^WEB-INF:app/src/main/webapp/WEB-INF"
        pipeline-results-json: results.json
    
  # Run a Software Composition Analysis scan
  software-composition-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with: 
        java-version: 1.8
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #  - run: curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan . --update-advisor 2>&1 | tee sca_output.txt
    - run: curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan . --update-advisor
      env:
        SRCCLR_API_TOKEN: ${{secrets.SRCCLR_API_TOKEN}}
    - uses: actions/upload-artifact@v1
      with:
        name: SCAScanResults
        path: sca_output.txt
